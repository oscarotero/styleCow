styleCow php library (version 0.1)

2011. Created by Oscar Otero (http://oscarotero.com / http://anavallasuiza.com)

styleCow is released under the GNU Affero GPL version 3.
More information at http://www.gnu.org/licenses/agpl-3.0.html


======================================================
WHAT IS STYLECOW?
======================================================

It is a php library that allows parsing and manipulating css files. The main class is styleCow that loads and parses the css file(s) creating an internal array with all the selectors, properties and values. Then you can transform the array using one or moreavailable plugins and finally return the css code.


======================================================
EXAMPLE
======================================================

include('stylecow/stylecow.php');

//Fist we instance the class (note that we are using namespaces)
$styleCow = new stylecow\Stylecow();

//Load the file
$styleCow->load('my-styles.css');

//Transform the css file using one or more plugins (for example vendor_prefixes or variables)
$styleCow->transform(array(
	'vendor_prefixes',
	'variables'
));

//Get the result css code
$css = $styleCow->toString();

//Print the css code and die
$styleCow->show();


======================================================
FEATURES
======================================================

* Written in php 5.3
* Includes the css files using @import
* Extensible with plugins
* Easy to install and use


======================================================
AVAILABLE PLUGINS
======================================================

These are the available plugins until now:

======================================================
Plugin: vendor_prefixes
======================================================

Adds the vendor prefixes to all properties in need. For example.


origin:
---------------
div.foo {
	border-radius: 4px;
	border-top-left-radius: 0;
	background: linear-gradient(#333, #999);
}

div.foo ::selection {
	background: red;
}
---------------


result:
---------------
div.foo {
	border-radius: 4px;
	-moz-border-radius: 4px;
	-webkit-border-radius: 4px;
	-o-border-radius: 4px;
	border-top-left-radius: 0;
	-moz-border-radius-topleft: 0;
	-webkit-border-top-left-radius: 0;
	background: linear-gradient(#333, #999);
	background: -webkit-gradient(linear, left top, left bottom, from(#333), to(#999));
	background: -moz-linear-gradient(#333, #999);
	background: -webkit-linear-gradient(#333, #999);
}
div.foo ::selection {
	background: red;
}
div.foo ::-moz-selection {
	background: red;
}
---------------


======================================================
Plugin: matches
======================================================

Resolve the :matches() css4 selector (http://www.w3.org/TR/2011/WD-selectors4-20110929/#matches)

origin:
---------------
div.foo :matches(h1, h2, h3, h4, h5, h6) a {
	color: blue;
}

div.foo :matches(article, section) header :matches(h1, h2) {
	color: black;
}
---------------

result:
---------------
div.foo h1 a, div.foo h2 a, div.foo h3 a, div.foo h4 a, div.foo h5 a, div.foo h6 a {
	color: blue;
}
div.foo article header h1, div.foo article header h2, div.foo section header h1, div.foo section header h2 {
	color: black;
}
---------------


======================================================
Plugin: variables
======================================================

You can use variables to recycle code

origin:
---------------
$variables {
	title-font: Helvetica, Arial, sans-serif;

	title-style: {
		font-family: $title-font;
		font-size: 2em;
		text-shadow: 1px 1px #CCC;
	}
}

div.foo h1 {
	$title-style;
}
div.foo h2 {
	font-family: $title-font;
	font-size: 1em;
}
---------------

result:
---------------
div.foo h1 {
	font-family: Helvetica, Arial, sans-serif;
	font-size: 2em;
	text-shadow: 1px 1px #CCC;
}
div.foo h2 {
	font-family: Helvetica, Arial, sans-serif;
	font-size: 1em;
}
---------------


======================================================
Plugin: nested_rules
======================================================

Resolve the nested rules, allowing to write css in a more legible way:

origin:
---------------
article.main {
	padding: 4px;

	header {
		margin-bottom: 20px;

		h1, h2 {
			font-size: Helvetica, sans-serif;
			color: #000;
		}

		p {
			color: #666;

			a {
				text-decoration: none;
				color: green;
			}

			a:hover {
				text-decoration: underline;
			}
		}
	}
}
---------------

result:
---------------
article.main {
	padding: 4px;
}
article.main header {
	margin-bottom: 20px;
}
article.main header h1, article.main header h2 {
	font-size: Helvetica, sans-serif;
	color: #000;
}
article.main header p {
	color: #666;
}
article.main header p a {
	text-decoration: none;
	color: green;
}
article.main header p a:hover {
	text-decoration: underline;
}
---------------


======================================================
Plugin: ie_filters
======================================================

Add Internet Explorer filters to emulate some css properties no supported by IE (for example, some 2d transform functions, opacity or linear gradients)

origin:
---------------
div.foo {
	background: linear-gradient(#666, #999);
	transform: rotate(45deg) scaleY(-1);
	opacity: 0.5;
}
---------------

result:
---------------
div.foo {
	background: linear-gradient(#666, #999);
	transform: rotate(45deg) scaleY(-1);
	opacity: 0.5;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#666666', endColorStr='#999999'), progid:DXImageTransform.Microsoft.Matrix(sizingMethod="auto expand", M11 = 0.707106781187, M12 = -0.707106781187, M21 = 0.707106781187, M22 = 0.707106781187), flipV, alpha(opacity=50);
	-ms-filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#666666', endColorStr='#999999'), progid:DXImageTransform.Microsoft.Matrix(sizingMethod="auto expand", M11 = 0.707106781187, M12 = -0.707106781187, M21 = 0.707106781187, M22 = 0.707106781187), flipV, alpha(opacity=50);
}
---------------


======================================================
Plugin: grid
======================================================

You can configurate and use one or various grids for the layout

origin:
---------------
$grid {
	width: 950px;
	columns: 24;
	gutter: 10px;
}

/* left column */
div.menu {
	$grid: cols(8);
}

/* center column */
div.content {
	$grid: cols(12);
}

/* right column */
aside {
	$grid: cols(4);
	margin-right: 0;
}
---------------

result:
---------------
div.menu {
	width: 310px;
	float: left;
	display: inline;
	margin-right: 10px;
}
div.content {
	width: 470px;
	float: left;
	display: inline;
	margin-right: 10px;
}
aside {
	margin-right: 0;
	width: 150px;
	float: left;
	display: inline;
}
---------------
